{
  "openapi": "3.0.3",
  "info": {
    "title": "NetPilot Authentication API",
    "description": "API endpoints for user authentication, registration, and token management in NetPilot",
    "version": "1.0.0",
    "contact": {
      "name": "NetPilot Support",
      "email": "support@netpilot.local",
      "url": "https://netpilot.local/support"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "http://meadadigital.com:3001/api/v1",
      "description": "Development server"
    },
    {
      "url": "https://api-staging.meadadigital.com/api/v1",
      "description": "Staging server"
    },
    {
      "url": "https://api.meadadigital.com/api/v1",
      "description": "Production server"
    }
  ],
  "tags": [
    {
      "name": "Authentication",
      "description": "User authentication and authorization endpoints"
    }
  ],
  "paths": {
    "/auth/login": {
      "post": {
        "tags": ["Authentication"],
        "summary": "User login",
        "description": "Authenticate user with email and password. Returns access and refresh tokens.",
        "operationId": "login",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              },
              "examples": {
                "admin_login": {
                  "summary": "Admin login",
                  "value": {
                    "email": "admin@netpilot.local",
                    "password": "admin123"
                  }
                },
                "user_login": {
                  "summary": "Regular user login",
                  "value": {
                    "email": "user@example.com",
                    "password": "userPassword123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The number of allowed requests in the current period",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                },
                "examples": {
                  "successful_login": {
                    "summary": "Successful login response",
                    "value": {
                      "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjEsImVtYWlsIjoiYWRtaW5AbmV0cGlsb3QubG9jYWwiLCJyb2xlIjoiYWRtaW4iLCJpYXQiOjE3MDE0MzI0MDAsImV4cCI6MTcwMTQzNjAwMH0.signature",
                      "refresh_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjEsInR5cGUiOiJyZWZyZXNoIiwiaWF0IjoxNzAxNDMyNDAwLCJleHAiOjE3MDIwMzcyMDB9.signature",
                      "expires_in": 3600,
                      "token_type": "Bearer",
                      "user": {
                        "id": 1,
                        "email": "admin@netpilot.local",
                        "name": "Administrator",
                        "role": "admin",
                        "created_at": "2023-12-01T10:00:00Z",
                        "last_login": "2023-12-01T11:00:00Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "invalid_credentials": {
                    "summary": "Invalid email or password",
                    "value": {
                      "error": {
                        "code": "INVALID_CREDENTIALS",
                        "message": "Invalid email or password",
                        "timestamp": "2023-12-01T10:00:00Z",
                        "path": "/api/v1/auth/login"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                },
                "examples": {
                  "validation_error": {
                    "summary": "Invalid input data",
                    "value": {
                      "error": {
                        "code": "VALIDATION_ERROR",
                        "message": "Validation failed",
                        "details": [
                          {
                            "field": "email",
                            "message": "Email is required"
                          },
                          {
                            "field": "password",
                            "message": "Password must be at least 6 characters"
                          }
                        ],
                        "timestamp": "2023-12-01T10:00:00Z",
                        "path": "/api/v1/auth/login"
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many login attempts",
            "headers": {
              "Retry-After": {
                "description": "Number of seconds to wait before retrying",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "rate_limit_exceeded": {
                    "summary": "Too many login attempts",
                    "value": {
                      "error": {
                        "code": "RATE_LIMIT_EXCEEDED",
                        "message": "Too many login attempts. Try again in 15 minutes.",
                        "timestamp": "2023-12-01T10:00:00Z",
                        "path": "/api/v1/auth/login"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/register": {
      "post": {
        "tags": ["Authentication"],
        "summary": "User registration",
        "description": "Register a new user account. Requires admin role for production environments.",
        "operationId": "register",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterRequest"
              },
              "examples": {
                "new_user": {
                  "summary": "Register new user",
                  "value": {
                    "email": "newuser@example.com",
                    "password": "strongPassword123!",
                    "name": "John Doe",
                    "role": "user"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                },
                "examples": {
                  "new_user_created": {
                    "summary": "New user created",
                    "value": {
                      "id": 2,
                      "email": "newuser@example.com",
                      "name": "John Doe",
                      "role": "user",
                      "created_at": "2023-12-01T10:00:00Z",
                      "updated_at": "2023-12-01T10:00:00Z"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "User already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "user_exists": {
                    "summary": "Email already registered",
                    "value": {
                      "error": {
                        "code": "USER_ALREADY_EXISTS",
                        "message": "User with this email already exists",
                        "timestamp": "2023-12-01T10:00:00Z",
                        "path": "/api/v1/auth/register"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Refresh access token",
        "description": "Generate a new access token using a valid refresh token",
        "operationId": "refreshToken",
        "security": [
          {
            "refreshToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "Token refreshed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefreshTokenResponse"
                },
                "examples": {
                  "token_refreshed": {
                    "summary": "New access token generated",
                    "value": {
                      "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.new_token.signature",
                      "expires_in": 3600,
                      "token_type": "Bearer"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid or expired refresh token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "invalid_refresh_token": {
                    "summary": "Invalid refresh token",
                    "value": {
                      "error": {
                        "code": "INVALID_REFRESH_TOKEN",
                        "message": "Invalid or expired refresh token",
                        "timestamp": "2023-12-01T10:00:00Z",
                        "path": "/api/v1/auth/refresh"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": ["Authentication"],
        "summary": "User logout",
        "description": "Invalidate the current access token and refresh token",
        "operationId": "logout",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "Logout successful"
          },
          "401": {
            "description": "Unauthorized - invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/me": {
      "get": {
        "tags": ["Authentication"],
        "summary": "Get current user profile",
        "description": "Retrieve the profile information of the currently authenticated user",
        "operationId": "getCurrentUser",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User profile retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfileResponse"
                },
                "examples": {
                  "user_profile": {
                    "summary": "Current user profile",
                    "value": {
                      "id": 1,
                      "email": "admin@netpilot.local",
                      "name": "Administrator",
                      "role": "admin",
                      "created_at": "2023-12-01T10:00:00Z",
                      "updated_at": "2023-12-01T10:00:00Z",
                      "last_login": "2023-12-01T11:00:00Z",
                      "preferences": {
                        "theme": "dark",
                        "language": "en",
                        "timezone": "UTC"
                      },
                      "permissions": [
                        "domains:read",
                        "domains:write",
                        "ssl:read",
                        "ssl:write",
                        "users:read",
                        "users:write"
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/change-password": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Change user password",
        "description": "Change the password for the currently authenticated user",
        "operationId": "changePassword",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordRequest"
              },
              "examples": {
                "password_change": {
                  "summary": "Change password",
                  "value": {
                    "current_password": "oldPassword123",
                    "new_password": "newStrongPassword456!"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password changed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Password changed successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid current password",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "invalid_current_password": {
                    "summary": "Wrong current password",
                    "value": {
                      "error": {
                        "code": "INVALID_CURRENT_PASSWORD",
                        "message": "Current password is incorrect",
                        "timestamp": "2023-12-01T10:00:00Z",
                        "path": "/api/v1/auth/change-password"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT access token for API authentication"
      },
      "refreshToken": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT refresh token for token renewal"
      }
    },
    "schemas": {
      "LoginRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "User email address",
            "example": "admin@netpilot.local",
            "maxLength": 255
          },
          "password": {
            "type": "string",
            "description": "User password",
            "example": "admin123",
            "minLength": 6,
            "maxLength": 255
          }
        }
      },
      "RegisterRequest": {
        "type": "object",
        "required": ["email", "password", "name"],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "User email address",
            "example": "newuser@example.com",
            "maxLength": 255
          },
          "password": {
            "type": "string",
            "description": "User password (minimum 8 characters, must include uppercase, lowercase, number)",
            "example": "strongPassword123!",
            "minLength": 8,
            "maxLength": 255,
            "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]"
          },
          "name": {
            "type": "string",
            "description": "User full name",
            "example": "John Doe",
            "minLength": 2,
            "maxLength": 100
          },
          "role": {
            "type": "string",
            "enum": ["user", "admin"],
            "description": "User role",
            "example": "user",
            "default": "user"
          }
        }
      },
      "ChangePasswordRequest": {
        "type": "object",
        "required": ["current_password", "new_password"],
        "properties": {
          "current_password": {
            "type": "string",
            "description": "Current password",
            "example": "oldPassword123"
          },
          "new_password": {
            "type": "string",
            "description": "New password (minimum 8 characters, must include uppercase, lowercase, number)",
            "example": "newStrongPassword456!",
            "minLength": 8,
            "maxLength": 255,
            "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]"
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "description": "JWT access token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          },
          "refresh_token": {
            "type": "string",
            "description": "JWT refresh token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          },
          "expires_in": {
            "type": "integer",
            "description": "Token expiration time in seconds",
            "example": 3600
          },
          "token_type": {
            "type": "string",
            "description": "Token type",
            "example": "Bearer"
          },
          "user": {
            "$ref": "#/components/schemas/UserResponse"
          }
        }
      },
      "RefreshTokenResponse": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "description": "New JWT access token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          },
          "expires_in": {
            "type": "integer",
            "description": "Token expiration time in seconds",
            "example": 3600
          },
          "token_type": {
            "type": "string",
            "description": "Token type",
            "example": "Bearer"
          }
        }
      },
      "UserResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "User ID",
            "example": 1
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User email address",
            "example": "admin@netpilot.local"
          },
          "name": {
            "type": "string",
            "description": "User full name",
            "example": "Administrator"
          },
          "role": {
            "type": "string",
            "enum": ["user", "admin"],
            "description": "User role",
            "example": "admin"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "User creation timestamp",
            "example": "2023-12-01T10:00:00Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "User last update timestamp",
            "example": "2023-12-01T10:00:00Z"
          },
          "last_login": {
            "type": "string",
            "format": "date-time",
            "description": "Last login timestamp",
            "example": "2023-12-01T11:00:00Z",
            "nullable": true
          }
        }
      },
      "UserProfileResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UserResponse"
          },
          {
            "type": "object",
            "properties": {
              "preferences": {
                "type": "object",
                "properties": {
                  "theme": {
                    "type": "string",
                    "enum": ["light", "dark"],
                    "example": "dark"
                  },
                  "language": {
                    "type": "string",
                    "example": "en"
                  },
                  "timezone": {
                    "type": "string",
                    "example": "UTC"
                  }
                }
              },
              "permissions": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "User permissions",
                "example": ["domains:read", "domains:write", "ssl:read", "ssl:write"]
              }
            }
          }
        ]
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "description": "Error code",
                "example": "INVALID_CREDENTIALS"
              },
              "message": {
                "type": "string",
                "description": "Error message",
                "example": "Invalid email or password"
              },
              "timestamp": {
                "type": "string",
                "format": "date-time",
                "description": "Error timestamp",
                "example": "2023-12-01T10:00:00Z"
              },
              "path": {
                "type": "string",
                "description": "API path where error occurred",
                "example": "/api/v1/auth/login"
              }
            }
          }
        }
      },
      "ValidationErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "description": "Error code",
                "example": "VALIDATION_ERROR"
              },
              "message": {
                "type": "string",
                "description": "Error message",
                "example": "Validation failed"
              },
              "details": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "field": {
                      "type": "string",
                      "description": "Field that failed validation",
                      "example": "email"
                    },
                    "message": {
                      "type": "string",
                      "description": "Validation error message",
                      "example": "Email is required"
                    }
                  }
                }
              },
              "timestamp": {
                "type": "string",
                "format": "date-time",
                "description": "Error timestamp",
                "example": "2023-12-01T10:00:00Z"
              },
              "path": {
                "type": "string",
                "description": "API path where error occurred",
                "example": "/api/v1/auth/login"
              }
            }
          }
        }
      }
    }
  }
}